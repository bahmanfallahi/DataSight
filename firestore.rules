/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description This ruleset enforces a user-ownership model for user profiles and a more permissive model for data reports,
 * with restrictions on deletion. User profiles are private and only accessible to the owning user.
 * Data analysis reports are publicly readable, but only the owner can create, update, or delete them.
 *
 * @dataStructure
 * - /users/{userId}: Stores individual user profiles, secured by owner-only access.
 * - /datasight_data/{reportId}: Stores data analysis reports, publicly readable but writable only by the owner.
 *
 * @keySecurityDecisions
 * - User listing is disallowed to protect user privacy.
 * - Data reports are publicly readable to facilitate sharing and collaboration.
 * - Admins are explicitly prevented from deleting data analysis reports.
 *
 * @denormalizationForAuthorization
 * - Each report document includes a `userId` field to easily verify ownership.
 *
 * @structuralSegregation
 * - User profiles and data reports are stored in separate top-level collections based on access requirements.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create) - User 'abc' with ID 'abc' can create their own profile.
     *   - auth.uid: 'abc'
     *   - request.resource.data.uid: 'abc'
     * @allow (get, update, delete) - User 'abc' with ID 'abc' can read and modify their own profile.
     *   - auth.uid: 'abc'
     *   - resource.data.uid: 'abc'
     * @deny (create) - User 'def' cannot create a profile with ID 'abc'.
     *   - auth.uid: 'def'
     *   - request.resource.data.uid: 'abc'
     * @deny (get, update, delete) - User 'def' cannot read or modify user 'abc's profile.
     *   - auth.uid: 'def'
     *   - resource.data.uid: 'abc'
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Verifies that the user is signed in
      function isSignedIn() {
          return request.auth != null;
      }

      // Verifies that the request is made by the owner
      function isOwner(userId) {
          return request.auth.uid == userId;
      }

      // Verifies that the request is made by an existing owner
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to data analysis reports, allowing public read access and owner-only write access. Admins cannot delete.
     * @path /datasight_data/{reportId}
     * @allow (get, list) - Any user can read data analysis reports.
     * @allow (create) - User 'abc' can create a data analysis report with their ID.
     *   - auth.uid: 'abc'
     *   - request.resource.data.userId: 'abc'
     * @allow (update) - User 'abc' can update their own data analysis report.
     *   - auth.uid: 'abc'
     *   - resource.data.userId: 'abc'
     * @deny (create) - User 'def' cannot create a data analysis report for user 'abc'.
     *   - auth.uid: 'def'
     *   - request.resource.data.userId: 'abc'
     * @deny (update) - User 'def' cannot update a data analysis report owned by user 'abc'.
     *   - auth.uid: 'def'
     *   - resource.data.userId: 'abc'
     * @deny (delete) - Admins cannot delete data analysis reports.
     *   - auth.uid: 'admin'
     * @principle Allows public read access with owner-only writes for data analysis reports.
     */
    match /datasight_data/{reportId} {

      // Verifies that the user is signed in
      function isSignedIn() {
          return request.auth != null;
      }

      // Verifies that the request is made by the owner
      function isOwner(userId) {
          return request.auth.uid == userId;
      }

       // Verifies that the request is made by an existing owner
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}